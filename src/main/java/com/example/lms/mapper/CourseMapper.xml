<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.lms.mapper.CourseMapper">
<resultMap id="classMap" type="com.example.lms.dto.ClassDTO">
    <result property="classNo" column="class_no"/>
    <result property="classroom" column="classroom"/>
    <result property="maxPerson" column="max_person"/>
</resultMap>

<resultMap id="courseDetailMap" type="com.example.lms.dto.CourseDTO">
    <id property="courseId" column="course_id"/>
    <result property="courseName" column="course_name"/>
    <result property="description" column="description"/>
    <result property="teacherNo" column="teacher_no"/>
    <result property="teacherName" column="name"/>
    <result property="classNo" column="class_no"/>
    <result property="classroom" column="classroom"/>
    <result property="startDate" column="start_date"/>
    <result property="endDate" column="end_date"/>
    <result property="maxPerson" column="max_person"/>
</resultMap>

	<select id="selectCourseList"
		resultType="com.example.lms.dto.CourseDTO" parameterType="map">
		SELECT
		t.`name` AS teacherName,
		c.course_name AS courseName,
		cl.classroom as classroom,
		c.course_id AS courseId,
		CONCAT(c.start_date,' ~ ',c.end_date) AS startDate,
		CONCAT(COUNT(ca.course_id),' / ',cl.max_person) AS applyPerson
		FROM course c
		INNER JOIN class cl ON c.class_no = cl.class_no
		INNER JOIN teacher t ON c.teacher_no = t.teacher_no
		LEFT JOIN course_apply ca ON c.course_id = ca.course_id
		<where>
			<if test="searchOption == 'all' and keyword != null and keyword != '' ">
				AND (t.name LIKE CONCAT('%', #{keyword}, '%')
				OR
				c.course_name LIKE CONCAT('%', #{keyword}, '%'))
			</if>
			<if
				test="searchOption == 'teacherName' and keyword != null and keyword != '' ">
				AND t.name LIKE CONCAT('%', #{keyword}, '%')
			</if>
			<if
				test="searchOption == 'courseName' and keyword != null and keyword != '' ">
				AND c.course_name LIKE CONCAT('%', #{keyword}, '%')
			</if>
		</where>
		GROUP BY c.course_id
		ORDER BY c.course_id DESC
    	LIMIT #{startRow}, #{rowPerPage}
	</select>

	<insert id="insertCourse">
		INSERT INTO course
		(course_name, description,class_no
		,start_date, end_date, teacher_no)
		VALUES
		(#{courseName}, #{description}, #{classNo}
		, #{startDate}, #{endDate}, #{teacherNo})
	</insert>

	<select id="selectTeacherList" parameterType="map">
		select teacher_no AS teacherNo,
		name
		from teacher
	</select>

	<select id="selectClassList" parameterType="map" resultMap="classMap">
		SELECT cl.class_no, cl.classroom, cl.max_person
		FROM class cl
		LEFT JOIN (
		    SELECT class_no, MAX(end_date) AS last_end_date
		    FROM course
		    GROUP BY class_no
		) c ON cl.class_no = c.class_no
		WHERE
		    c.class_no IS NULL
		    OR
		    c.last_end_date &lt;= DATE_ADD(CURDATE(), INTERVAL 2 MONTH)
	</select>

	<select id="getOverlapCount" resultType="int">
	    SELECT COUNT(*)
	    FROM course
	    WHERE class_no = #{classNo}
	      AND (start_date &lt;= #{endDate} AND end_date &gt;= #{startDate})
	</select>

	<select id="selectClassByNo" parameterType="int" resultMap="classMap">
		SELECT class_no, classroom, max_person
		FROM class
		WHERE class_no = #{classNo}
	</select>


	<select id="getTotalCount">
		SELECT COUNT(*)
		FROM course c
		INNER JOIN class cl ON c.class_no = cl.class_no
    	INNER JOIN teacher t ON c.teacher_no = t.teacher_no
		<where>
			<if test="searchOption == 'all' and keyword != null and keyword != '' ">
				AND (t.name LIKE CONCAT('%', #{keyword}, '%')
				OR
				c.course_name LIKE CONCAT('%', #{keyword}, '%'))
			</if>
			<if
				test="searchOption == 'teacherName' and keyword != null and keyword != '' ">
				AND t.name LIKE CONCAT('%', #{keyword}, '%')
			</if>
			<if
				test="searchOption == 'courseName' and keyword != null and keyword != '' ">
				AND c.course_name LIKE CONCAT('%', #{keyword}, '%')
			</if>
		</where>
	</select>
	
	
	
	<!-- 강사별 강의리스트 -->
	<select id="selectCourseListByTeacherNo" parameterType="map" resultType="com.example.lms.dto.CourseDTO">
		SELECT course_id courseId, course_name courseName,
		       CASE 
		           WHEN start_date > CURDATE() THEN '예정'
		           WHEN end_date &lt; CURDATE() THEN '완료'
		           ELSE '진행중'
		       END AS courseActive,
		       start_date startDate, end_date endDate
		FROM course
		WHERE teacher_no = #{teacherNo}
		<choose>
			<when test="filter == '예정'">
				AND start_date > CURDATE()
			</when>
			<when test="filter == '진행중'">
				AND start_date &lt;= CURDATE() AND end_date >= CURDATE()
			</when>
			<when test="filter == '완료'">
				AND end_date &lt; CURDATE()
			</when>
			<!-- 전체일 경우 조건 없음 -->
		</choose>
		ORDER BY end_date ASC
		LIMIT #{startRow}, #{rowPerPage}
		</select>
	<!-- 강사별 강의리스트 cnt -->
	<select id="getCountCourseListByTeacherNo" parameterType="map" resultType="int">
		SELECT COUNT(*)
		FROM course
		WHERE teacher_no = #{teacherNo}
		<choose>
			<when test="filter == '예정'">
				AND start_date > CURDATE()
			</when>
			<when test="filter == '진행중'">
				AND start_date &lt;= CURDATE() AND end_date >= CURDATE()
			</when>
			<when test="filter == '완료'">
				AND end_date &lt; CURDATE()
			</when>
		</choose>
	</select>
	
	
	<select id="selectCourseListNotEnded" resultType="com.example.lms.dto.CourseDTO">
	    SELECT
	        c.course_id AS courseId,
	        c.course_name AS courseName,
	        c.description,
	        c.class_no AS classNo,
	        c.start_date AS startDate,
	        c.end_date AS endDate,
	        c.teacher_no AS teacherNo,
	        cl.classroom AS classroom
	    FROM course c
	    INNER JOIN class cl ON c.class_no = cl.class_no
	    WHERE c.end_date >= #{today}
	</select>
	
	<select id="getCourseOne" resultMap="courseDetailMap">
	    SELECT 
	        c.course_id AS course_id,
	        c.course_name AS course_name,
	        c.description AS description,
	        c.class_no AS class_no,
	        c.start_date AS start_date,
	        c.end_date AS end_date,
	        c.teacher_no AS teacher_no,
	        t.name AS name,
	        cl.classroom AS classroom,
	        cl.max_person AS max_person
	    FROM course c 
	    INNER JOIN teacher t ON c.teacher_no = t.teacher_no
	    INNER JOIN class cl ON c.class_no = cl.class_no
	    WHERE c.course_id = #{courseId}
	</select>
	
	<update id="updateCourse" parameterType="com.example.lms.dto.CourseDTO">
	    UPDATE course
	    SET course_name = #{courseName},
	        description = #{description},
	        class_no = #{classNo},
	        start_date = #{startDate},
	        end_date = #{endDate},
	        teacher_no = #{teacherNo}
	    WHERE course_id = #{courseId}
	</update>
	
	<delete id="deleteCourses" parameterType="java.util.List">
	    DELETE FROM course WHERE course_id IN
	    <foreach collection="list" item="id" open="(" separator="," close=")">
	        #{id}
	    </foreach>
	</delete>
	
	
	<!-- 강사 등록 시 선택할 강의명 조회 -->
	<select id="getCourseNameNotEnded" resultType="com.example.lms.dto.CourseDTO">
		SELECT 
			course_id AS courseId, 
			course_name AS courseName
		FROM course
		WHERE end_date >= CURDATE()  <!-- 종료되지 않은 강의만 조회 -->
		ORDER BY course_name ASC;
	</select>
</mapper>