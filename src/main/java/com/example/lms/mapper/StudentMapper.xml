<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.lms.mapper.StudentMapper">
	<!-- 강의별 학생 조회 -->
	<select id="selectStudentListByCourseId" parameterType="map" resultType="com.example.lms.dto.StudentDTO">
		SELECT name, SUBSTRING(CAST(sn AS CHAR), 1, 6) AS birth
		, case when SUBSTRING(CAST(sn AS CHAR), 7, 1) IN ('1', '3') then '남' ELSE '여' END AS gender
		, email, phone FROM student WHERE course_id = #{courseId} ORDER BY name ASC limit #{startRow}, #{rowPerPage}
	</select>
	<!-- 강의별 학생수 -->
	<select id="getStudentCntByCourseId" parameterType="int" resultType="int">
		SELECT COUNT(*) FROM student WHERE course_id = #{courseId}
	</select>
	
	
	<!-- 학생 개인정보 조회 -->
	<select id="selectStudentById" parameterType="string" resultType="com.example.lms.dto.StudentDTO">
		SELECT 
			s.student_no AS studentNo,
   			s.student_id AS studentId,
			s.name,
			s.email,
			s.phone,
			s.course_id AS courseId,
			c.course_name AS courseName
		FROM student s
		JOIN course c ON s.course_id = c.course_id
		WHERE s.student_id = #{studentId}
	</select>
	
	<!-- 아이디  중복확인 -->
	<!-- 아이디 있는 행을 찾아서 맞으면 1 아니면 0으로 확인 -->
	<select id="isStudentIdExist" parameterType="string" resultType="int">
		SELECT COUNT(*)
		FROM student
		WHERE student_id = #{studentId}
	</select>
	
	<!-- 비밀번호 확인 -->
	<select id="selectPasswordById" parameterType="string" resultType="string">
		SELECT password
		FROM student
		WHERE student_id = #{studentId}
	</select>
	
	<!-- 개인정보 수정 -->
	<update id="updateStudentInfo" parameterType="com.example.lms.dto.TeacherDTO">
		UPDATE student
		SET
			student_id = #{studentId},
			email = #{email},
			phone = #{phone},
			password = #{password}
		WHERE student_no = #{studentNo}
	</update>
	
	<select id="getStudentList" parameterType="map" resultType="com.example.lms.dto.StudentDTO">
		SELECT s.name, s.phone, s.sn, s.address
			, s.email, s.student_id AS studentId
			, c.course_name AS courseName
		FROM student s INNER JOIN course c
		ON s.course_id = c.course_id
		<where>
			<if test="searchOption == 'all' and keyword != null and keyword != '' ">
				AND (s.name LIKE CONCAT('%', #{keyword}, '%')
				OR
				c.course_name LIKE CONCAT('%', #{keyword}, '%'))
			</if>
			<if test="searchOption == 'studentName' and keyword != null and keyword != '' ">
				AND s.name LIKE CONCAT('%', #{keyword}, '%')
			</if>
			<if test="searchOption == 'courseName' and keyword != null and keyword != ''">
				AND c.course_name LIKE CONCAT('%', #{keyword}, '%')
			</if>
		</where>
		ORDER BY s.student_no DESC
		LIMIT #{startRow}, #{rowPerPage}
	</select>
	
	<select id="getTotalCount" resultType="int">
		SELECT COUNT(*)
		FROM student s
		INNER JOIN course c
		ON s.course_id = c.course_id
		<where>
			<if test="searchOption == 'all' and keyword != null and keyword != '' ">
				AND (s.name LIKE CONCAT('%', #{keyword}, '%')
				OR
				c.course_name LIKE CONCAT('%', #{keyword}, '%'))
			</if>
			<if test="searchOption == 'studentName' and keyword != null and keyword != '' ">
				AND s.name LIKE CONCAT('%', #{keyword}, '%')
			</if>
			<if test="searchOption == 'courseName' and keyword != null and keyword != ''">
				AND c.course_name LIKE CONCAT('%', #{keyword}, '%')
			</if>
		</where>
	</select>
	
	<insert id="insertStudentList" parameterType="list">
	  INSERT INTO student (student_id, course_id, password, name, sn, address, email, phone, reg_date)
	  VALUES
	  <foreach collection="list" item="student" separator=",">
	    (#{student.studentId}, #{student.courseId}, #{student.password}, #{student.name},
	     REPLACE(#{student.sn}, '-', ''), #{student.address}, #{student.email}, #{student.phone}, NOW())
	  </foreach>
	</insert>

	<select id="selectCourse"  resultType="com.example.lms.dto.CourseDTO">
		SELECT course_id AS courseId, course_name AS courseName
		FROM course
	</select>
</mapper>








