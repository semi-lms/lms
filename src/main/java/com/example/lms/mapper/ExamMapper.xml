<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.lms.mapper.ExamMapper">

	<!-- 성적 리스트 -->
	<select id="selectScoreList" parameterType="map" resultType="com.example.lms.dto.ExamSubmissionDTO">
		SELECT st.name, s.score, s.submit_date submitDate, st.student_no studentNo, s.submission_id submissionId
		FROM student st
		LEFT JOIN exam_submission s ON st.student_no = s.student_no
		WHERE st.course_id = #{courseId}
		AND (exam_id = #{examId} OR exam_id IS NULL)
		<choose>
			<when test="filter == '미제출'">
				AND s.score IS NULL
			</when>
			<when test="filter == '제출'">
				AND s.score IS NOT NULL
			</when>
			<!-- 전체일 경우 조건 없음 -->
		</choose>
		ORDER BY st.name ASC
		LIMIT #{startRow}, #{rowPerPage}
	</select>

	<!-- 성적 리스트 카운트 -->
	<select id="getScoreCnt" parameterType="map" resultType="int">
		SELECT COUNT(*)
		FROM student st
		LEFT JOIN exam_submission s ON st.student_no = s.student_no
		WHERE st.course_id = #{courseId}
		AND (exam_id = #{examId} OR exam_id IS NULL)
		<choose>
			<when test="filter == '미제출'">
				AND s.score IS NULL
			</when>
			<when test="filter == '제출'">
				AND s.score IS NOT NULL
			</when>
			<!-- 전체일 경우 조건 없음 -->
		</choose>
	</select>
	
	<!-- 성적 리스트 조회 위한 exam_id로 course_id 추출 -->
	<select id="getCourseIdByExamId" parameterType="int" resultType="int">
		SELECT course_id FROM exam WHERE exam_id = #{examId}
	</select>
	
	<!-- 시험 리스트 조회 -->
	<select id="selectExamList" parameterType="map" resultType="com.example.lms.dto.ExamDTO">
		SELECT title, exam_start_date examStartDate, exam_end_date examEndDate, exam_id examId
		FROM exam
		WHERE course_id = #{courseId}
		ORDER BY exam_end_date ASC
		LIMIT #{startRow}, #{rowPerPage}
	</select>

	<!-- 시험 리스트 페이징 카운트 -->
	<select id="getExamCnt" parameterType="int" resultType="int">
		SELECT COUNT(*) FROM exam WHERE course_id = #{courseId}
	</select>

	<!-- 시험 등록 -->
	<insert id="insertExam" parameterType="com.example.lms.dto.ExamDTO">
		INSERT INTO exam (course_id, title, exam_start_date, exam_end_date)
		VALUES (#{courseId}, #{title}, #{examStartDate}, #{examEndDate})
	</insert>

	<!-- 시험 수정 -->
	<update id="updateExam" parameterType="com.example.lms.dto.ExamDTO">
		UPDATE exam
		SET title = #{title}, exam_start_date = #{examStartDate}, exam_end_date = #{examEndDate}
		WHERE exam_id = #{examId}
	</update>

	<!-- 시험 삭제 -->
	<delete id="deleteExam" parameterType="int">
		DELETE FROM exam WHERE exam_id = #{examId}
	</delete>

	<!-- 시험 제출 등록 -->
	<insert id="insertSubmission" parameterType="com.example.lms.dto.ExamSubmissionDTO" useGeneratedKeys="true" keyProperty="submissionId">
		INSERT INTO exam_submission (submission_id, exam_id, student_no, submit_date, score)
		VALUES (#{submissionId}, #{examId}, #{studentNo}, now(), 0)
	</insert>

	<!-- 시험 문제 가져오기 -->
	<select id="getQuestionsByExamId" parameterType="int" resultType="com.example.lms.dto.ExamQuestionDTO">
		SELECT question_id AS questionId, exam_id AS examId, question_no questionNo,
		       question_title AS questionTitle, question_text AS questionText, correct_no AS correctNo
		FROM exam_question
		WHERE exam_id = #{examId}
		ORDER BY question_no ASC
	</select>

	<!-- 보기 가져오기 -->
	<select id="getOptionsByQuestionId" resultType="com.example.lms.dto.ExamOptionDTO">
		SELECT question_id AS questionId, option_no AS optionNo, option_text AS optionText
		FROM exam_option
		WHERE question_id = #{questionId}
		ORDER BY option_no ASC
	</select>

	<!-- 개별 응답 저장 -->
	<insert id="insertAnswer" parameterType="com.example.lms.dto.ExamAnswerDTO">
		INSERT INTO exam_answer (submission_id, question_id, answer_no)
		VALUES (#{submissionId}, #{questionId}, #{answerNo})
	</insert>

	<!-- 전체 응답 일괄 저장 -->
	<insert id="insertAnswers" parameterType="java.util.List">
		INSERT INTO exam_answer (submission_id, question_id, answer_no)
		VALUES
		<foreach collection="list" item="answer" separator=",">
			(#{answer.submissionId}, #{answer.questionId}, #{answer.answerNo})
		</foreach>
	</insert>

	<!-- 자동 채점 -->
	<select id="calculateScore" parameterType="int" resultType="int">
		SELECT COUNT(*)
		FROM exam_answer ea
		JOIN exam_question eq ON ea.question_id = eq.question_id
		WHERE ea.submission_id = #{submissionId}
		AND ea.answer_no = eq.correct_no
	</select>

	<!-- 점수 반영 -->
	<update id="updateScore" parameterType="map">
		UPDATE exam_submission
		SET score = #{score}
		WHERE submission_id = #{submissionId}
	</update>

	<!-- 학생 시험 리스트 (응시 상태 포함) -->
<select id="selectExamListByStudentNo" resultType="com.example.lms.dto.ExamDTO">
    SELECT e.exam_id AS examId, e.title AS title, e.exam_start_date AS examStartDate,
           e.exam_end_date AS examEndDate, e.course_id AS courseId,
           CASE WHEN es.exam_id IS NOT NULL THEN '응시완료' ELSE '미응시' END AS submitStatus,
           CASE 
             WHEN es.exam_id IS NOT NULL THEN '불가'
             WHEN NOW() BETWEEN e.exam_start_date AND e.exam_end_date THEN '가능'
             ELSE '불가' 
           END AS status,
           es.score
    FROM exam e
    JOIN student s ON e.course_id = s.course_id
    LEFT JOIN exam_submission es ON e.exam_id = es.exam_id AND es.student_no = #{studentNo}
    WHERE s.student_no = #{studentNo}
    ORDER BY e.exam_start_date DESC
    LIMIT #{startRow}, #{rowPerPage}
</select>

	<!-- 한 학생의 시험 수 -->
	<select id="countExamListByStudentNo" resultType="int">
		SELECT COUNT(*)
		FROM exam
		WHERE course_id = (
			SELECT course_id FROM student WHERE student_no = #{studentNo}
		)
	</select>

	<!-- 응시 여부 조회 -->
	<select id="selectSubmissionByExamIdAndStudentNo" parameterType="map" resultType="com.example.lms.dto.ExamSubmissionDTO">
		SELECT submission_id AS submissionId, exam_id AS examId , student_no AS studentNo , submit_date AS submitDate , score FROM exam_submission WHERE exam_id = #{examId} AND student_no = #{studentNo}
	</select>

	<!-- 응시 정보 조회 -->
	<select id="selectSubmissionById" parameterType="int" resultType="com.example.lms.dto.ExamSubmissionDTO">
		SELECT submission_id AS submissionId, exam_id AS examId , student_no AS studentNo , submit_date AS submitDate , score FROM exam_submission WHERE submission_id = #{submissionId}
	</select>

	<!-- 제출 답안 조회 -->
	<select id="selectAnswersBySubmissionId" parameterType="int" resultType="com.example.lms.dto.ExamAnswerDTO">
		SELECT answer_id AS answerId, submission_id AS submissionId, question_id AS questionId , answer_no AS answerNo FROM exam_answer WHERE submission_id = #{submissionId}
	</select>
	<!-- 학생 제출 답과 문제 정답을 같이 가져오기 -->
	<select id="selectExamAnswersWithCorrect" resultType="com.example.lms.dto.ExamAnswerDTO"> 
	    SELECT ea.question_id AS questionId,
	           ea.answer_no AS answerNo,
	           q.correct_no AS correctNo, q.question_no AS questionNo, q.question_title AS questionTitle, q.exam_id AS examId
	    FROM exam_answer ea
	    JOIN exam_question q ON ea.question_id = q.question_id
	    WHERE ea.submission_id = #{submissionId}
	</select>
	
	<!-- 시험 이름 가져오기 -->
	<select id="getExamTitle" parameterType="int" resultType="String">
		SELECT title FROM exam WHERE exam_id = #{examId}
	</select>

	<!-- 문제 개수 조회 -->
	<select id="getQuestionCnt" parameterType="int" resultType="int">
		SELECT COUNT(*) FROM exam_question WHERE exam_id = #{examId}
	</select>

	<!-- questionId로 문제 가져오기 -->
	<select id="getQuestionByQuestionId" parameterType="int" resultType="com.example.lms.dto.ExamQuestionDTO">
		SELECT question_id AS questionId, exam_id AS examId, question_no AS questionNo,
		       question_title AS questionTitle, question_text AS questionText, correct_no AS correctNo
		FROM exam_question
		WHERE question_id = #{questionId}
	</select>
	
	<!-- 문제 업데이트 -->
	<update id="updateQuestion" parameterType="map">
		UPDATE exam_question
		SET question_title = #{questionTitle}, question_text = #{questionText}, correct_no = #{correctNo}
		WHERE question_id = #{questionId}
	</update>

	<!-- 보기 업데이트 -->
	<update id="updateOption" parameterType="map">
		UPDATE exam_option
		SET option_text = #{optionText}
		WHERE question_id = #{questionId} AND option_no = #{optionNo}
	</update>

	
	<!-- 문제 등록 -->
	<insert id="insertQuestion" parameterType="com.example.lms.dto.ExamQuestionDTO" useGeneratedKeys="true" keyProperty="questionId">
		INSERT INTO exam_question (exam_id, question_no, question_title, question_text, correct_no)
		VALUES (#{examId}, #{questionNo}, #{questionTitle}, #{questionText}, #{correctNo})
	</insert>
	<!-- 보기 등록 -->
	<insert id="insertOption" parameterType="com.example.lms.dto.ExamOptionDTO">
		INSERT INTO exam_option (question_id, option_no, option_text)
		VALUES (#{questionId}, #{optionNo}, #{optionText})
	</insert>
	
	<!-- 시험 삭제 관련 쿼리들 -->
	<!-- 1. exam_option 삭제 -->
	<delete id="deleteExamOptionByExamId" parameterType="int">
		DELETE FROM exam_option
		WHERE question_id IN (
			SELECT question_id FROM exam_question WHERE exam_id = #{examId}
		)
	</delete>
	<!-- 2. exam_question 삭제 -->
	<delete id="deleteExamQuestionByExamId" parameterType="int">
		DELETE FROM exam_question
		WHERE exam_id = #{examId}
	</delete>
	<!-- 3. exam 삭제 -->
	<delete id="deleteExamByExamId" parameterType="int">
		DELETE FROM exam
		WHERE exam_id = #{examId}
	</delete>
	
	<!-- questionId로 examId 받는 쿼리 -->
	<select id="getExamIdByQuestionId" parameterType="int" resultType="int">
		SELECT exam_id FROM exam_question WHERE question_id = #{questionId}
	</select>
</mapper>
