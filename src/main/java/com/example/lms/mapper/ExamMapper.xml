<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.lms.mapper.ExamMapper">
	<!-- 성적 리스트 -->
	<select id="selectScoreList" parameterType="map"
		resultType="com.example.lms.dto.ExamSubmissionDTO">
		SELECT st.name, s.score, s.submit_date submitDate FROM
		student st
		LEFT JOIN exam_submission s ON st.student_no = s.student_no
		WHERE st.course_id = #{courseId} AND (exam_id = #{examId} OR exam_id
		IS NULL)
		<choose>
			<when test="filter == '미제출'">
				AND s.score is null
			</when>
			<when test="filter == '제출'">
				AND s.score is not null
			</when>
			<!-- 전체일 경우 조건 없음 -->
		</choose>
		ORDER BY st.name ASC
		LIMIT #{startRow}, #{rowPerPage}
	</select>
	<!-- 페이징 -->
	<select id="getScoreCnt" parameterType="map" resultType="int">
		SELECT COUNT(*) from student st
		LEFT JOIN exam_submission s ON st.student_no = s.student_no
		WHERE st.course_id = #{courseId} AND (exam_id = #{examId} OR exam_id
		IS NULL)
		<choose>
			<when test="filter == '미제출'">
				AND s.score is null
			</when>
			<when test="filter == '제출'">
				AND s.score is not null
			</when>
			<!-- 전체일 경우 조건 없음 -->
		</choose>
	</select>

	<!-- 시험 리스트 조회 -->
	<select id="selectExamList" parameterType="map"
		resultType="com.example.lms.dto.ExamDTO">
		SELECT title, exam_start_date examStartDate, exam_end_date
		examEndDate, exam_id examId FROM exam WHERE course_id = #{courseId}
		ORDER BY exam_end_date ASC LIMIT #{startRow}, #{rowPerPage}
	</select>
	<!-- 페이징 위한 총 데이터수 -->
	<select id="getExamCnt" parameterType="int" resultType="int">
		SELECT
		COUNT(*) FROM exam WHERE course_id = #{courseId}
	</select>
	<!-- 시험 리스트 등록 -->
	<insert id="insertExam"
		parameterType="com.example.lms.dto.ExamDTO">
		INSERT INTO exam (course_id, title, exam_start_date,
		exam_end_date)
		VALUES (#{courseId}, #{title}, #{examStartDate},
		#{examEndDate})
	</insert>
	<!-- 시험 리스트 수정 -->
	<update id="updateExam"
		parameterType="com.example.lms.dto.ExamDTO">
		UPDATE exam
		SET title = #{title}, exam_start_date =
		#{examStartDate}, exam_end_date = #{examEndDate}
		WHERE exam_id = #{examId}
	</update>
	<!-- 시험 리스트 삭제 -->
	<delete id="deleteExam" parameterType="int">
		DELETE FROM exam
		WHERE
		exam_id = #{examId}
	</delete>
	<!--  시험 제출 등록 -->
	<insert id="insertSubmission" parameterType="com.example.lms.dto.ExamSubmissionDTO" useGeneratedKeys="true" keyProperty="submissionId">
	 INSERT INTO exam_submission (submission_id, exam_id, student_no, submit_date, score)
	 VALUES (#{submissionId}, #{examId}, #{studentNo}, now(), 0)
	</insert>
	<!-- 시험문제 가져오기  -->
	<select id="getQuestionsByExamId" resultType="com.example.lms.dto.ExamQuestionDTO">
    SELECT question_id AS questionId , exam_id AS examId , question_no questionNo , 
    question_title AS questionTitle, question_text AS questionText, correct_no AS correctNo
   	FROM exam_question
    WHERE exam_id = #{examId}
    ORDER BY question_no ASC
	</select>
	

	<!-- 보기 불러오기 -->
	<select id="getOptionsByQuestionId" resultType="com.example.lms.dto.ExamOptionDTO">
    SELECT question_id AS questionId, option_no AS optionNo ,option_text as optionText
    FROM exam_option
    WHERE question_id = #{questionId}
    ORDER BY option_no ASC
	</select>
	<!-- 개별 응답 저장 -->
	<insert id="insertAnswer"
		parameterType="com.example.lms.dto.ExamAnswerDTO">
		INSERT INTO exam_answer (submission_id, question_id, answer_no)
		VALUES (#{submissionId}, #{questionId}, #{answerNo})
	</insert>

	<!-- 전체 응답 일괄 저장 -->
<insert id="insertAnswers" parameterType="java.util.List">
    INSERT INTO exam_answer (submission_id, question_id, answer_no)
    VALUES
    <foreach collection="list" item="answer" separator=",">
        (#{answer.submissionId}, #{answer.questionId}, #{answer.answerNo})
    </foreach>
</insert>

	
	<!-- 자동 채점  -->
	<select id="calculateScore" parameterType="int" resultType="int">
		SELECT COUNT(*)
		FROM exam_answer ea
		JOIN exam_question eq ON ea.question_id = eq.question_id
		WHERE ea.submission_id = #{submissionId}
		AND ea.answer_no = eq.correct_no
	</select>
	<!-- 점수 반영 -->

	
	<update id="updateScore" parameterType="map">
		UPDATE exam_submission
		SET score = #{score}
		WHERE submission_id = #{submissionId}
	</update>
	
	<!-- 학생 시험 리스트 (응시상태, 점수 포함) -->
	<select id="selectExamListByStudentNo" resultType="com.example.lms.dto.ExamDTO">
    SELECT 
        e.exam_id,
        e.title,
        e.exam_start_date,
        e.exam_end_date,
        <!--응시 여부: exam_submission에 데이터 존재 여부  -->
        CASE 
            WHEN es.exam_id IS NOT NULL THEN '응시완료' 
            ELSE '미응시' 
        END AS submit_status,
        <!-- 응시 가능 여부: 현재 시간이 시험 기간 안에 있으면 '가능'  -->
        CASE 
            WHEN NOW() BETWEEN e.exam_start_date AND e.exam_end_date THEN '가능' 
            ELSE '불가' 
        END AS status,
        es.score
    FROM 
        exam e
    LEFT JOIN 
        exam_submission es 
        ON e.exam_id = es.exam_id AND es.student_no = #{studentNo}
    ORDER BY 
        e.exam_start_date DESC
    LIMIT #{startRow}, #{rowPerPage}
</select>
<!-- 한 학생의 시험갯수 -->
<select id="countExamListByStudentNo" resultType="int">
    SELECT COUNT(*) 
    FROM exam
    WHERE course_id = (
        SELECT course_id
        FROM student
        WHERE student_no = #{studentNo}
    )
</select>

</mapper>